# generated by datamodel-codegen:
#   filename:  jira_schema.json
#   timestamp: 2022-11-10T07:00:26+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import AnyUrl, BaseModel, Extra, Field  # , constr

import schemas.issue_links as issue_links


class Properties(BaseModel):
    class Config:
        extra = Extra.forbid

    properties: Optional[Dict[Any, str]] = None


class StatusCategory(BaseModel):
    class Config:
        extra = Extra.forbid

    self: Optional[str] = None
    id: Optional[int] = None
    key: Optional[str] = None
    colorName: Optional[str] = None
    name: Optional[str] = None


class To(BaseModel):
    class Config:
        extra = Extra.forbid

    self: Optional[str] = None
    statusColor: Optional[str] = None
    description: Optional[str] = None
    iconUrl: Optional[str] = None
    name: Optional[str] = None
    id: Optional[str] = None
    statusCategory: Optional[StatusCategory] = Field(None, title="Status Category")


class Author(BaseModel):
    class Config:
        extra = Extra.forbid

    self: Optional[str] = None
    name: Optional[str] = None
    key: Optional[str] = None
    emailAddress: Optional[str] = None
    avatarUrls: Optional[Dict[Any, str]] = None
    displayName: Optional[str] = None
    active: bool
    timeZone: Optional[str] = None


class Item(BaseModel):
    class Config:
        extra = Extra.forbid

    field: Optional[str] = None
    fieldtype: Optional[str] = None
    from_: Optional[str] = Field(None, alias="from")
    fromString: Optional[str] = None
    to: Optional[str] = None
    toString: Optional[str] = None


class HistoryMetadataParticipant(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[str] = None
    displayName: Optional[str] = None
    displayNameKey: Optional[str] = None
    type: Optional[str] = None
    avatarUrl: Optional[str] = None
    url: Optional[str] = None


class JsonType(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[str] = None
    items: Optional[str] = None
    system: Optional[str] = None
    custom: Optional[str] = None
    customId: Optional[int] = None


class SimpleLink(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[str] = None
    styleClass: Optional[str] = None
    iconClass: Optional[str] = None
    label: Optional[str] = None
    title: Optional[str] = None
    href: Optional[str] = None
    weight: Optional[int] = None


class HistoryMetadata(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[str] = None
    description: Optional[str] = None
    descriptionKey: Optional[str] = None
    activityDescription: Optional[str] = None
    activityDescriptionKey: Optional[str] = None
    emailDescription: Optional[str] = None
    emailDescriptionKey: Optional[str] = None
    actor: Optional[HistoryMetadataParticipant] = None
    generator: Optional[HistoryMetadataParticipant] = None
    cause: Optional[HistoryMetadataParticipant] = None
    extraData: Optional[Dict[Any, str]] = None


class History(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[str] = None
    author: Optional[Author] = Field(None, title="User")
    created: Optional[str] = None
    items: Optional[List[Item]] = None
    historyMetadata: Optional[HistoryMetadata] = Field(None, title="History Metadata")


class Changelog(BaseModel):
    class Config:
        extra = Extra.forbid

    startAt: Optional[int] = None
    maxResults: Optional[int] = None
    total: Optional[int] = None
    histories: Optional[List[History]] = None


class FieldMeta(BaseModel):
    class Config:
        extra = Extra.forbid

    required: bool
    schema_: Optional[JsonType] = Field(None, alias="schema")
    name: Optional[str] = None
    fieldId: Optional[str] = None
    autoCompleteUrl: Optional[str] = None
    hasDefaultValue: Optional[bool] = None
    operations: Optional[List[str]] = None
    allowedValues: Optional[List] = None
    defaultValue: Optional[Any] = None


class LinkGroup(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[str] = None
    styleClass: Optional[str] = None
    header: Optional[SimpleLink] = None
    weight: Optional[int] = None
    links: Optional[List[SimpleLink]] = None
    groups: Optional[List[LinkGroup]] = None


class Transition(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[str] = None
    name: Optional[str] = None
    opsbarSequence: Optional[int] = None
    to: Optional[To] = Field(None, title="Status")
    fields: Optional[Dict[Any, FieldMeta]] = None
    expand: Optional[str] = None


class Operations(BaseModel):
    class Config:
        extra = Extra.forbid

    linkGroups: Optional[List[LinkGroup]] = None


class Editmeta(BaseModel):
    class Config:
        extra = Extra.forbid

    fields: Optional[Dict[Any, FieldMeta]] = None


class IssueFields(BaseModel):
    summary: Optional[str] = None
    status: Optional[issue_links.Status] = Field(None, title="Status")
    watcher: Optional[Dict[Any, Any]] = None
    attachment: Optional[Dict[Any, Any]] = None
    subtasks: List[issue_links.IssueRef]
    description: Optional[str] = None
    project: Optional[Dict[Any, Any]] = None
    comment: Optional[Dict[Any, Any]] = None
    issuelinks: List[issue_links.IssueLink]
    issuetype: Optional[issue_links.Issuetype] = None
    worklog: Optional[Dict[Any, Any]] = None
    updated: Optional[Dict[Any, Any]] = None
    timetracking: Optional[Dict[Any, Any]] = None


class Issue(BaseModel):
    class Config:
        extra = Extra.forbid

    expand: Optional[str] = None
    id: Optional[str] = None
    self: Optional[AnyUrl] = None
    key: Optional[str] = None
    fields: Optional[IssueFields] = None
    renderedFields: Optional[Dict[Any, Any]] = None
    properties: Optional[Properties] = Field(None, title="Properties")
    names: Optional[Dict[Any, str]] = None
    schema_: Optional[Dict[Any, JsonType]] = Field(None, alias="schema")
    transitions: Optional[List[Transition]] = None
    operations: Optional[Operations] = Field(None, title="Opsbar")
    editmeta: Optional[Editmeta] = Field(None, title="Edit Meta")
    changelog: Optional[Changelog] = Field(None, title="Changelog")
    versionedRepresentations: Optional[Dict[Any, Dict[Any, Any]]] = None
    fieldsToInclude: Optional[Dict[str, Any]] = Field(None, title="Included Fields")


LinkGroup.update_forward_refs()
